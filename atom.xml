<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>个人小站</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-09-10T03:27:13.713Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Hisaolin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/09/10/hello-world/"/>
    <id>http://yoursite.com/2018/09/10/hello-world/</id>
    <published>2018-09-10T03:27:13.712Z</published>
    <updated>2018-09-10T03:27:13.713Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>变量学习</title>
    <link href="http://yoursite.com/2017/10/15/variablestudy/"/>
    <id>http://yoursite.com/2017/10/15/variablestudy/</id>
    <published>2017-10-15T13:53:24.000Z</published>
    <updated>2018-09-12T15:11:26.368Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是变量"><a href="#什么是变量" class="headerlink" title="什么是变量"></a>什么是变量</h3><p>把一个值赋给一个名字时（如把值”Shawn”赋给 name),它会存储在内存中，称为变量（variable），在大多数编程语言中，都把这称为“把值存储（store）在变量中”。</p><h4 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">"Shawn"</span></span><br><span class="line">name2 = name</span><br><span class="line"></span><br><span class="line">print(<span class="string">'my name is'</span>,name)</span><br><span class="line">print(name,name2)</span><br><span class="line"></span><br><span class="line">name = <span class="string">"Xiao"</span></span><br><span class="line"></span><br><span class="line">print(name,name2)</span><br></pre></td></tr></table></figure><h4 id="结果示例"><a href="#结果示例" class="headerlink" title="结果示例"></a>结果示例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">my name <span class="keyword">is</span> Shawn</span><br><span class="line">Shawn Shawn</span><br><span class="line">Xiao Shawn</span><br></pre></td></tr></table></figure><blockquote><p>在第二行，name2已被赋值为“Shawn”，且下方并未对 name2 重新赋值</p></blockquote><h3 id="变量命名规则"><a href="#变量命名规则" class="headerlink" title="变量命名规则"></a>变量命名规则</h3><ul><li>必须以一个字母或一个下划线字符开头。后面可以使用一个字母、数字或下划线字符的序列，长度不限；</li><li>字母可以是大小写，大小写是不同的。也说是说，Ax不同于ax;</li><li>数字可以是从 （含）0 到 9的任意数字字符。</li><li>除了字母、数字和下划线字符，不能使用其它字符。空格、标点符号和其它字符在变量名中都是不允许的</li><li>以下关键字不能声明为变量<blockquote><p>[‘and’, ‘as’, ‘assert’, ‘break’, ‘class’, ‘continue’, ‘def’, ‘del’, ‘elif’, ‘else’, ‘except’, ‘exec’, ‘finally’, ‘for’, ‘from’, ‘global’, ‘if’, ‘import’, ‘in’, ‘is’, ‘lambda’, ‘not’, ‘or’, ‘pass’, ‘print’, ‘raise’, ‘return’, ‘try’, ‘while’, ‘with’, ‘yield’]</p></blockquote></li></ul><h4 id="合法变量名举例"><a href="#合法变量名举例" class="headerlink" title="合法变量名举例"></a>合法变量名举例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">my_answer</span><br><span class="line">answer23</span><br><span class="line">answer_23</span><br><span class="line">Youranswer</span><br><span class="line">Your2cnAnswer</span><br></pre></td></tr></table></figure><h4 id="不合法变量名举例"><a href="#不合法变量名举例" class="headerlink" title="不合法变量名举例"></a>不合法变量名举例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">23</span>answer</span><br><span class="line">your-answer</span><br><span class="line">my answer</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;什么是变量&quot;&gt;&lt;a href=&quot;#什么是变量&quot; class=&quot;headerlink&quot; title=&quot;什么是变量&quot;&gt;&lt;/a&gt;什么是变量&lt;/h3&gt;&lt;p&gt;把一个值赋给一个名字时（如把值”Shawn”赋给 name),它会存储在内存中，称为变量（variable），在大多
      
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python 变量" scheme="http://yoursite.com/tags/python-%E5%8F%98%E9%87%8F/"/>
    
  </entry>
  
  <entry>
    <title>时移 ——让女神永不下线</title>
    <link href="http://yoursite.com/2017/10/15/myAthena-md/"/>
    <id>http://yoursite.com/2017/10/15/myAthena-md/</id>
    <published>2017-10-15T13:52:08.000Z</published>
    <updated>2018-09-12T14:40:34.672Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  当屌丝遇见女神，通常是惊鸿一瞥，各种羞涩、自卑与纠结，以至于来不及问询电话、微信、QQ、钉钉……就这么擦肩而过，空留无尽的YY……此时，要是人生也能时移该有多美好。当然，解决方案还是有的——</p><p>Plan A：跑步<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  如果现实中转身小跑追上萍水相逢的女神，然后愉快地交换联系方式，那是霸道总裁而非屌丝了。屌丝追女神注定更艰辛，跑废你的跑步机好好练速度吧，当你的速度能超过光速，恭喜你，时移技能get了，你可以轻轻松松回到任何时空，此时的你就是你自己的神，你可以无数次对女神say Hi~，不过，根据<br>E=mc^2<br>，当你运动加快时，机械能也就加大了，即E增加了，而 C是常数，所以m就增加了，也就是说，当你速度接近光速时，你已经是一个宇宙级的大胖子了，女神所在的地球已然装不下你了……</p><p>Plan B：碾压<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 碾压谁？当然不是女神了，碾压你自己！人是三维生物，这个世界是三维的世界，根据弦论，宇宙是11维的，三维生物向低维展开，当高度趋向于0时，那是一个多么巨大的二维平面，大到足以包裹住地球，想象一下，地球在你怀里自转，女神身处任何时空，对你来说只不过是换了一个编排目录，你都能温柔注视，是不是很浪漫。</p><p>Plan C：乱入<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 这个乱入全靠运气，你得误打误撞找到一扇通往女神的任意门，而这扇任意门学名叫虫洞。简单来说就是通过时空扭曲来连接两个三维空间，维持一个虫洞连续开放，就能在过去与未来之间穿梭。可是有永不关闭连续开放的虫洞吗？有！大雄的书桌你忘了吗？所以屌丝大雄追到女神静香是必然的，当然，你的女神也手到擒来</p><p>Plan D：牛掰程序猿<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>如果以上计划都失败了，那就好好发挥技术屌丝的特长吧，努力做个超级无敌的码农吧。要多无敌多牛掰？牛到你可以把任何无序转化为有序的程式。打个比方，覆水怎样收回，破镜怎样重圆，当所有分子巧之又巧地按一定规律有序运动时，奇迹就能发生，这就是所谓的熵减。在正常的时间流逝方向，熵是增加的，颠倒过来，熵便减小，当一切对你来说都是可控的有序时，时移不过是雕虫小技。当然，牛到这种程度，恭喜你，你必定不再是屌丝了，而是，万能的神！</p><blockquote><p>此文撰于 2015 年 6 月 4 日</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;  当屌丝遇见女神，通常是惊鸿一瞥，各种羞涩、自卑与纠结，以至于来不及问询电话、微信、QQ、钉钉……就这么擦肩而过，空留无尽的YY……此时，要是人生也能时移该有多美好。当然，解决方案还是有的——&lt;/p&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>20170616交互程序学习笔记</title>
    <link href="http://yoursite.com/2017/10/15/20170616interactionstudy/"/>
    <id>http://yoursite.com/2017/10/15/20170616interactionstudy/</id>
    <published>2017-10-15T13:50:53.000Z</published>
    <updated>2018-09-12T15:12:30.258Z</updated>
    
    <content type="html"><![CDATA[<h3 id="用户输入"><a href="#用户输入" class="headerlink" title="用户输入"></a>用户输入</h3><ul><li>python3中单引号和双引号不做区分;</li><li>用户输入:input,例如：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name = input(<span class="string">"name:"</span>)      </span><br><span class="line">age = input(<span class="string">"age:"</span>)        </span><br><span class="line">job = input(<span class="string">"job:"</span>)        </span><br><span class="line">salary = input(<span class="string">"salary:"</span>)</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>python3中的 “input” 等同于python2 中的 “raw_input”,在 python2中也不要用 “input”</p></blockquote><h3 id="三引号（’’’）的作用"><a href="#三引号（’’’）的作用" class="headerlink" title="三引号（’’’）的作用"></a>三引号（’’’）的作用</h3><ul><li>多行文本输入时需用到 3 引号，3 引号之间输入的内容将被原样保留，如:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">msg = <span class="string">'''      </span></span><br><span class="line"><span class="string">If crosswords are too easy and Sudoku a touch boring, why not go and climb a tree?</span></span><br><span class="line"><span class="string">A study found that childish pastimes such as climbing trees, running barefoot and crawling dramatically boost memory.</span></span><br><span class="line"><span class="string">Working memory - the type of memory we use every day to remember phone numbers, follow directions and use a shopping list - improved by 50 per cent.</span></span><br><span class="line"><span class="string">The University of North Florida researchers put 72 men and women aged between 18 and 59 through a test of working memory, in which they had to remember lists of numbers in reverse order.</span></span><br><span class="line"><span class="string">Some then spent two hours doing a range of obstacle course-like activities.</span></span><br><span class="line"><span class="string">These included climbing trees, running barefoot and crawling along a narrow beam.</span></span><br><span class="line"><span class="string">Others listened to a lecture or did a yoga class, before working memory was tested again.</span></span><br><span class="line"><span class="string">Only those who had done the obstacle course did better.</span></span><br><span class="line"><span class="string">Climbing a tree and balancing on a beam hone ‘proprioceptive’ skills – the brain’s ability to sense where the legs, arms, hands and feet are in space without looking.            </span></span><br><span class="line"><span class="string">'''</span>        </span><br><span class="line">print(msg)</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">msg1 = <span class="string">'''     </span></span><br><span class="line"><span class="string">如果你觉得填字游戏太过简单，数独(一种运用纸、笔进行演算的逻辑游戏)又难的有点单调，为什么不去爬爬树呢?</span></span><br><span class="line"><span class="string">一项研究证明，爬树、赤脚跑、爬行等儿时的娱乐活动能够有效的提高记忆力。</span></span><br><span class="line"><span class="string">这些儿童游戏能让我们的工作记忆——即我们每天用以记住电话号码，认清方位，写出购物清单的记忆能力——提升了50%之多。</span></span><br><span class="line"><span class="string">北佛罗里达大学的研究人员对72名年龄在18-59岁之间的男女进行了研究，他们让这些调查对象记住若干写满倒序数字的数列，从而测定他们的工作记忆力。</span></span><br><span class="line"><span class="string">之后，一些调查对象参加了2小时类似障碍跑之类的体育活动。</span></span><br><span class="line"><span class="string">这些活动包括爬树，赤脚跑步和沿着一根狭窄的木道爬行。</span></span><br><span class="line"><span class="string">另一些调查对象则去听了一场演讲或参加了一节瑜伽课，然后研究人员再次测量了他们的工作记忆。</span></span><br><span class="line"><span class="string">只有那些进行了障碍赛跑活动的调查对象在第二次测试中成绩有所提高。</span></span><br><span class="line"><span class="string">爬树和走横木等活动能够锻炼人的“本体感受力”——通过这种能力，我们不用看到自己的四肢和手脚，就能感受到这些身体组织的存在。      </span></span><br><span class="line"><span class="string">'''</span>  </span><br><span class="line">print(msg1)</span><br></pre></td></tr></table></figure><h3 id="字符串格式化"><a href="#字符串格式化" class="headerlink" title="字符串格式化"></a>字符串格式化</h3><blockquote><p>1、%d、%s、%f: 强制定义数据类型的一种方式<br>2、帮助检测数据类型是否正确<br>3、默认输入输出都是字符串类型<br>4、type() 显示数据类型</p></blockquote><h4 id="格式化输出方法一之字符串拼接法（每一次拼接占用一块内存，所以一定不要用）："><a href="#格式化输出方法一之字符串拼接法（每一次拼接占用一块内存，所以一定不要用）：" class="headerlink" title="格式化输出方法一之字符串拼接法（每一次拼接占用一块内存，所以一定不要用）："></a>格式化输出方法一之字符串拼接法（每一次拼接占用一块内存，所以一定不要用）：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">info = <span class="string">'''     </span></span><br><span class="line"><span class="string">----- info of '''</span> + name +<span class="string">''' -----        </span></span><br><span class="line"><span class="string">Age:'''</span> + age +<span class="string">'''     </span></span><br><span class="line"><span class="string">Job:'''</span> + job +<span class="string">'''     </span></span><br><span class="line"><span class="string">Salary:'''</span> + salary</span><br><span class="line"></span><br><span class="line">print(info)</span><br></pre></td></tr></table></figure><h4 id="格式化输出方法二之百分号占位符法-需要注意数据类型（重要）："><a href="#格式化输出方法二之百分号占位符法-需要注意数据类型（重要）：" class="headerlink" title="格式化输出方法二之百分号占位符法,需要注意数据类型（重要）："></a>格式化输出方法二之百分号占位符法,需要注意数据类型（重要）：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">name = input(<span class="string">"name:"</span>)      </span><br><span class="line">age = int(input(<span class="string">"age:"</span>)) <span class="comment">#integer      </span></span><br><span class="line">print(type(age), type(str(age)))       </span><br><span class="line">job = input(<span class="string">"job:"</span>)        </span><br><span class="line">salary = input(<span class="string">"salary:"</span>)      </span><br><span class="line"></span><br><span class="line">info = <span class="string">'''     </span></span><br><span class="line"><span class="string">----- info of %s -----     </span></span><br><span class="line"><span class="string">Name:%s        </span></span><br><span class="line"><span class="string">Age:%d     </span></span><br><span class="line"><span class="string">Job:%s     </span></span><br><span class="line"><span class="string">Salary:%s      </span></span><br><span class="line"><span class="string">'''</span> %(name,name,age,job,salary)</span><br><span class="line"></span><br><span class="line">print(info)</span><br><span class="line"><span class="comment">#%s表示输入为字符串类型 %d为数字</span></span><br></pre></td></tr></table></figure><h4 id="格式化输出方法二之”Format1”（官方建议）"><a href="#格式化输出方法二之”Format1”（官方建议）" class="headerlink" title="格式化输出方法二之”Format1”（官方建议）:"></a>格式化输出方法二之”Format1”（官方建议）:</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">info = <span class="string">'''     </span></span><br><span class="line"><span class="string">----- info of &#123;_name&#125; -----        </span></span><br><span class="line"><span class="string">Name:&#123;_name&#125;       </span></span><br><span class="line"><span class="string">Age:&#123;_age&#125;     </span></span><br><span class="line"><span class="string">Job:&#123;_job&#125;     </span></span><br><span class="line"><span class="string">Salary:&#123;_salary&#125;       </span></span><br><span class="line"><span class="string">'''</span> .format(_name=name,     </span><br><span class="line">            _age=age,      </span><br><span class="line">            _job=job,</span><br><span class="line">            _salary=salary)       </span><br><span class="line"></span><br><span class="line">print(info)</span><br></pre></td></tr></table></figure><h4 id="格式化输出方法二之”Format2”"><a href="#格式化输出方法二之”Format2”" class="headerlink" title="格式化输出方法二之”Format2”:"></a>格式化输出方法二之”Format2”:</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">info = <span class="string">'''     </span></span><br><span class="line"><span class="string">----- info of &#123;0&#125; -----        </span></span><br><span class="line"><span class="string">Name:&#123;0&#125;       </span></span><br><span class="line"><span class="string">Age:&#123;1&#125;        </span></span><br><span class="line"><span class="string">Job:&#123;2&#125;        </span></span><br><span class="line"><span class="string">Salary:&#123;3&#125;     </span></span><br><span class="line"><span class="string">'''</span> .format(name,age,job,salary)       </span><br><span class="line">       </span><br><span class="line">print(info)</span><br></pre></td></tr></table></figure><h4 id="缩进"><a href="#缩进" class="headerlink" title="缩进"></a>缩进</h4><ul><li>强制缩进的好处：节省代码、结构清晰；</li><li>出现 IndentationError就是缩进错误；</li><li>所有代码自身是顶级，就必须是顶格写；<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># Date: 2017/6/11</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> getpass</span><br><span class="line"><span class="comment">#getpass 模块在 Pycharm 中不起作用</span></span><br><span class="line"></span><br><span class="line">_username = <span class="string">'xiaolin'</span></span><br><span class="line">_password = <span class="string">'abc123'</span></span><br><span class="line"></span><br><span class="line">username = input(<span class="string">"username:"</span>)</span><br><span class="line"><span class="comment">#password = getpass.getpass("password:")</span></span><br><span class="line">password = input(<span class="string">"password:"</span>)</span><br><span class="line"></span><br><span class="line">print(username,password)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> _username == username <span class="keyword">and</span> _password == password:</span><br><span class="line">    print(<span class="string">"Welcome user &#123;name&#125; login..."</span>. format(name = username))</span><br><span class="line"><span class="comment">#PRINT 是 IF 语句的子代码，上下级关系，下级需要缩进</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="comment">#IF 不成立则执行 ELSE，两者是同级关系，不需要缩进</span></span><br><span class="line">    print(<span class="string">"Invaild username or password!"</span>)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;用户输入&quot;&gt;&lt;a href=&quot;#用户输入&quot; class=&quot;headerlink&quot; title=&quot;用户输入&quot;&gt;&lt;/a&gt;用户输入&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;python3中单引号和双引号不做区分;&lt;/li&gt;
&lt;li&gt;用户输入:input,例如：&lt;figure clas
      
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python3" scheme="http://yoursite.com/tags/python3/"/>
    
  </entry>
  
</feed>
